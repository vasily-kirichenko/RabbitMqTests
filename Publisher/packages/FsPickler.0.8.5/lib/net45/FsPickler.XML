<?xml version="1.0" encoding="utf-8"?>
<doc>
<assembly><name>FsPickler</name></assembly>
<members>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:FsPickler.CustomPicklerAttribute">
<summary>
 Marks a type that uses a pickler generated from a static factory method.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="P:FsPickler.CustomPicklerRegistry.TypeNameConverter">
<summary>
 registered type name converter, if exists.
</summary>
</member>
<member name="P:FsPickler.CustomPicklerRegistry.Picklers">
<summary>
 list of currently registered custom picklers
</summary>
</member>
<member name="P:FsPickler.CustomPicklerRegistry.PicklerFactories">
<summary>
 list of currently registered custom pickler factories
</summary>
</member>
<member name="P:FsPickler.CustomPicklerRegistry.Name">
<summary>
 Identifier for the custom registry
</summary>
</member>
<member name="">

</member>
<member name="M:FsPickler.CustomPicklerRegistry.SetTypeNameConverter(FsPickler.ITypeNameConverter)">
<summary>
 register custom type serialization rules; useful for FSI type serializations.
</summary>
</member>
<member name="M:FsPickler.CustomPicklerRegistry.RegisterPicklerFactory(FsPickler.IPicklerFactory)">
<summary>
 register pluggable pickler factories
</summary>
</member>
<member name="M:FsPickler.CustomPicklerRegistry.RegisterPickler(FsPickler.Pickler)">
<summary>
 register pickler for a specific type
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="P:FsPickler.FsPickler.UUId">
<summary>
 Identifier of the cache instance used by the serializer.
</summary>
</member>
<member name="P:FsPickler.FsPickler.Name">
<summary>
 Name for the pickler cache
</summary>
</member>
<member name="M:FsPickler.FsPickler.UnPickle``1(System.Byte[])">
<summary>
 deserializes value out of a given byte array
</summary>
</member>
<member name="M:FsPickler.FsPickler.UnPickle``1(FsPickler.Pickler{``0},System.Byte[])">
<summary>
 deserializes value out of given byte array using given pickler
</summary>
</member>
<member name="M:FsPickler.FsPickler.SerializeSequence``1(System.Type,System.IO.Stream,System.Collections.IEnumerable,Microsoft.FSharp.Core.FSharpOption{``0},Microsoft.FSharp.Core.FSharpOption{System.Text.Encoding},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>Serialize a sequence of objects to the underlying stream.</summary>
 <param name="elementType">element type used in sequence.</param>
 <param name="stream">target stream.</param>
 <param name="sequence">input sequence.</param>
 <param name="streamingContext">streaming context.</param>
 <param name="encoding">encoding passed to the binary reader.</param>
 <param name="leaveOpen">leave underlying stream open when finished. Defaults to true.</param>
 <return>number of elements written to the stream.</return>
</member>
<member name="M:FsPickler.FsPickler.SerializeSequence``1(System.IO.Stream,System.Collections.Generic.IEnumerable{``0},Microsoft.FSharp.Core.FSharpOption{System.Object},Microsoft.FSharp.Core.FSharpOption{System.Text.Encoding},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>Serialize a sequence of objects to the underlying stream.</summary>
 <param name="stream">target stream.</param>
 <param name="sequence">input sequence.</param>
 <param name="streamingContext">streaming context.</param>
 <param name="encoding">encoding passed to the binary reader.</param>
 <param name="leaveOpen">leave underlying stream open when finished. Defaults to true.</param>
</member>
<member name="M:FsPickler.FsPickler.Serialize(FsPickler.Pickler,System.IO.Stream,System.Object,Microsoft.FSharp.Core.FSharpOption{System.Runtime.Serialization.StreamingContext},Microsoft.FSharp.Core.FSharpOption{System.Text.Encoding},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>Serialize object to the underlying stream using given pickler.</summary>
 <param name="pickler">untyped pickler used for serialization.</param>
 <param name="stream">target stream.</param>
 <param name="value">value to be serialized.</param>
 <param name="streamingContext">streaming context.</param>
 <param name="encoding">encoding passed to the binary reader.</param>
 <param name="leaveOpen">leave underlying stream open when finished. Defaults to true.</param>
</member>
<member name="M:FsPickler.FsPickler.Serialize(System.Type,System.IO.Stream,System.Object,Microsoft.FSharp.Core.FSharpOption{System.Runtime.Serialization.StreamingContext},Microsoft.FSharp.Core.FSharpOption{System.Text.Encoding},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>Serialize object of given type to the underlying stream.</summary>
 <param name="valueType">type of the given object.</param>
 <param name="stream">target stream.</param>
 <param name="value">value to be serialized.</param>
 <param name="streamingContext">streaming context.</param>
 <param name="encoding">encoding passed to the binary reader.</param>
 <param name="leaveOpen">leave underlying stream open when finished. Defaults to true.</param>
</member>
<member name="M:FsPickler.FsPickler.Serialize``1(FsPickler.Pickler{``0},System.IO.Stream,``0,Microsoft.FSharp.Core.FSharpOption{System.Runtime.Serialization.StreamingContext},Microsoft.FSharp.Core.FSharpOption{System.Text.Encoding},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>Serialize value to the underlying stream using given pickler.</summary>
 <param name="pickler">pickler used for serialization.</param>
 <param name="stream">target stream.</param>
 <param name="value">value to be serialized.</param>
 <param name="streamingContext">streaming context.</param>
 <param name="encoding">encoding passed to the binary reader.</param>
 <param name="leaveOpen">leave underlying stream open when finished. Defaults to true.</param>
</member>
<member name="M:FsPickler.FsPickler.Serialize``1(System.IO.Stream,``0,Microsoft.FSharp.Core.FSharpOption{System.Runtime.Serialization.StreamingContext},Microsoft.FSharp.Core.FSharpOption{System.Text.Encoding},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>Serialize value to the underlying stream.</summary>
 <param name="stream">target stream.</param>
 <param name="value">value to be serialized.</param>
 <param name="streamingContext">streaming context.</param>
 <param name="encoding">encoding passed to the binary writer.</param>
 <param name="leaveOpen">Leave underlying stream open when finished. Defaults to true.</param>
</member>
<member name="M:FsPickler.FsPickler.Pickle``1(``0)">
<summary>
 creates a byte array pickle out of a given value
</summary>
</member>
<member name="M:FsPickler.FsPickler.Pickle``1(FsPickler.Pickler{``0},``0)">
<summary>
 creates a byte array pickle out of given pickler and value
</summary>
</member>
<member name="M:FsPickler.FsPickler.IsSerializableType``1">
<summary>
 Decides if given type is serializable by FsPickler
</summary>
</member>
<member name="M:FsPickler.FsPickler.IsSerializableType(System.Type)">
<summary>
 Decides if given type is serializable by FsPickler
</summary>
</member>
<member name="M:FsPickler.FsPickler.GeneratePickler(System.Type)">
<summary>
 Auto generates a pickler for given type
</summary>
</member>
<member name="M:FsPickler.FsPickler.GeneratePickler``1">
<summary>
 Auto generates a pickler for given type variable
</summary>
</member>
<member name="M:FsPickler.FsPickler.DeserializeSequence``1(System.Type,System.IO.Stream,System.Int32,Microsoft.FSharp.Core.FSharpOption{``0},Microsoft.FSharp.Core.FSharpOption{System.Text.Encoding},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>Lazily deserialize a sequence of objects from the underlying stream.</summary>
 <param name="elementType">element type used in sequence.</param>
 <param name="stream">source stream.</param>
 <param name="length">number of elements to be deserialized.</param>
 <param name="streamingContext">streaming context.</param>
 <param name="encoding">encoding passed to the binary reader.</param>
 <param name="leaveOpen">leave underlying stream open when finished. Defaults to true.</param>
 <returns>An IEnumerator that lazily consumes elements from the stream.</returns>
</member>
<member name="M:FsPickler.FsPickler.DeserializeSequence``1(System.IO.Stream,System.Int32,Microsoft.FSharp.Core.FSharpOption{System.Object},Microsoft.FSharp.Core.FSharpOption{System.Text.Encoding},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>Lazily deserialize a sequence of objects from the underlying stream.</summary>
 <param name="stream">source stream.</param>
 <param name="length">number of elements to be deserialized.</param>
 <param name="streamingContext">streaming context.</param>
 <param name="encoding">encoding passed to the binary reader.</param>
 <param name="leaveOpen">leave underlying stream open when finished. Defaults to true.</param>
 <returns>An IEnumerator that lazily consumes elements from the stream.</returns>
</member>
<member name="M:FsPickler.FsPickler.Deserialize(FsPickler.Pickler,System.IO.Stream,Microsoft.FSharp.Core.FSharpOption{System.Runtime.Serialization.StreamingContext},Microsoft.FSharp.Core.FSharpOption{System.Text.Encoding},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>Deserialize object from the underlying stream using given pickler.</summary>
 <param name="pickler">untyped pickler used for deserialization.</param>
 <param name="stream">source stream.</param>
 <param name="streamingContext">streaming context.</param>
 <param name="encoding">encoding passed to the binary reader.</param>
 <param name="leaveOpen">leave underlying stream open when finished. Defaults to true.</param>
 <return>number of elements written to the stream.</return>
</member>
<member name="M:FsPickler.FsPickler.Deserialize(System.Type,System.IO.Stream,Microsoft.FSharp.Core.FSharpOption{System.Runtime.Serialization.StreamingContext},Microsoft.FSharp.Core.FSharpOption{System.Text.Encoding},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>Deserialize object of given type from the underlying stream.</summary>
 <param name="valueType">anticipated value type.</param>
 <param name="stream">source stream.</param>
 <param name="streamingContext">streaming context.</param>
 <param name="encoding">encoding passed to the binary reader.</param>
 <param name="leaveOpen">leave underlying stream open when finished. Defaults to true.</param>
</member>
<member name="M:FsPickler.FsPickler.Deserialize``1(FsPickler.Pickler{``0},System.IO.Stream,Microsoft.FSharp.Core.FSharpOption{System.Runtime.Serialization.StreamingContext},Microsoft.FSharp.Core.FSharpOption{System.Text.Encoding},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>Deserialize value of given type from the underlying stream, using given pickler.</summary>
 <param name="pickler">pickler used for serialization.</param>
 <param name="stream">source stream.</param>
 <param name="streamingContext"> streaming context.</param>
 <param name="encoding">encoding passed to the binary reader.</param>
 <param name="leaveOpen">leave underlying stream open when finished. Defaults to true.</param>
</member>
<member name="M:FsPickler.FsPickler.Deserialize``1(System.IO.Stream,Microsoft.FSharp.Core.FSharpOption{System.Runtime.Serialization.StreamingContext},Microsoft.FSharp.Core.FSharpOption{System.Text.Encoding},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>Deserialize value of given type from the underlying stream.</summary>
 <param name="stream">source stream.</param>
 <param name="streamingContext">streaming context.</param>
 <param name="encoding">encoding passed to the binary reader.</param>
 <param name="leaveOpen">leave underlying stream open when finished. Defaults to true.</param>
</member>
<member name="M:FsPickler.FsPickler.ComputeSize``1(``0,Microsoft.FSharp.Core.FSharpOption{FsPickler.Pickler{``0}})">
 <summary>Compute size in bytes for given input.</summary>
 <param name="pickler">use specific pickler for length computation.</param>
 <param name="value">input value.</param>
</member>
<member name="M:FsPickler.FsPickler.ComputeHash``1(``0,Microsoft.FSharp.Core.FSharpOption{FsPickler.Pickler{``0}},Microsoft.FSharp.Core.FSharpOption{FsPickler.Hashing.IHashStreamFactory})">
 <summary>Compute size and hashcode for given input.</summary>
 <param name="value">input value.</param>
 <param name="pickler">use specific pickler for hashcode generation.</param>
 <param name="hashFactory">the hashing algorithm to be used. MurMur3 by default</param>
</member>
<member name="M:FsPickler.FsPickler.#ctor(FsPickler.CustomPicklerRegistry)">
<summary>
 initializes a new pickler cache that resolves picklers using custom rules
</summary>
</member>
<member name="M:FsPickler.FsPickler.#ctor">
<summary>
 initializes an instance that resolves picklers from a global cache
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:FsPickler.IPicklerFactory">
<summary>
 A factory pattern for defining pluggable picklers.
 Types implementing this interface must declare a method of type:

     Create&lt;&apos;T1, ... , &apos;Tn | constraints&gt; : IPicklerResolver -&gt; Pickler

 The &apos;Create&apos; method may or may not contain generic parameters.
</summary>
</member>
<member name="M:FsPickler.IPicklerResolver.Resolve``1">
<summary>
 auto generates a pickler of type &apos;T
</summary>
</member>
<member name="M:FsPickler.IPicklerResolver.Resolve(System.Type)">
<summary>
 untyped pickler generation
</summary>
</member>
<member name="T:FsPickler.IPicklerResolver">
<summary>
 Pickler resolution interface
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:FsPickler.ITypeNameConverter">
 <summary>Provides facility for implementing a custom type serialization scheme.
 This is particularly useful in cases where bridging mono/.NET runtimes or
 dynamic/static assemblies is required.</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:FsPickler.NonSerializableTypeException">
<summary>
 raised by pickler generator whenever an unsupported type is encountered in the type graph.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="P:FsPickler.Pickler.UseWithSubtypes">
<summary>
 Specifies if pickler can be used on objects of proper subtype.
</summary>
</member>
<member name="">

</member>
<member name="P:FsPickler.Pickler.Type">
<summary>
 Returns the pickler&apos;s declared type.
</summary>
</member>
<member name="P:FsPickler.Pickler.PicklerType">
<summary>
 Returns the pickler&apos;s actual type.
</summary>
</member>
<member name="P:FsPickler.Pickler.PicklerInfo">
<summary>
 Provides information on the pickler generation method.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="P:FsPickler.Pickler.IsFixedSize">
<summary>
 Specifies if pickled type has object graphs of fixed size.
</summary>
</member>
<member name="P:FsPickler.Pickler.IsCyclicType">
<summary>
 Specifies if pickled type supports cyclic objects.
</summary>
</member>
<member name="P:FsPickler.Pickler.IsCacheByRef">
<summary>
 Specifies if pickled objects are to be cached by reference.
</summary>
</member>
<member name="P:FsPickler.Pickler.CacheId">
<summary>
 Cache Id used to generate this pickler.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:FsPickler.Pickler.ClonePickler">
<summary>
 clones pickler
</summary>
</member>
<member name="M:FsPickler.Pickler.Cast``1">
<summary>
 casts pickler to a typed version; may result in runtime error.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:FsPickler.Pickler">
<summary>
 The base type for all picklers
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:FsPickler.PicklerFactoryException">
<summary>
 raised by pickler generator whenever an unexpected error is encountered while calling pickler factories
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:FsPickler.PicklerGenerationException">
<summary>
 raised by pickler generator whenever an unexpected error is encountered.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="P:FsPickler.Reader.StreamingContext">
 <summary>StreamingContext of the current deserialization.</summary>
</member>
<member name="P:FsPickler.Reader.Resolver">
 <summary>The Pickler resolver used by the reader.</summary>
</member>
<member name="P:FsPickler.Reader.BinaryReader">
 <summary>BinaryReader to underlying stream.</summary> 
</member>
<member name="M:FsPickler.Reader.ReadSequence``1(FsPickler.Pickler{``0},System.String,System.Int32)">
<summary>
 used internally for optimized reading of sequences from the underlying stream.
 must only be performed as a top-level-operation
</summary>
</member>
<member name="M:FsPickler.Reader.ReadRootObject``1(FsPickler.Pickler{``0},System.String)">
<summary>
 used internally for reading root  object from the underlying stream.
 must only be performed as a top-level-operation
</summary>
</member>
<member name="M:FsPickler.Reader.Read``1(FsPickler.Pickler{``0})">
 <summary>Deserialize value from the underlying stream using the given pickler.</summary>
 <param name="pickler">Pickler used in deserialization.</param>
</member>
<member name="M:FsPickler.Reader.EarlyRegisterArray(System.Array)">
<summary>
 used internally for cyclic object graphs
</summary>
</member>
<member name="">

</member>
<member name="T:FsPickler.Reader">
<summary>
 Deserialization State object
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="P:FsPickler.Writer.StreamingContext">
 <summary>StreamingContext of the current serialization.</summary>
</member>
<member name="P:FsPickler.Writer.Resolver">
 <summary>The Pickler resolver used by the writer.</summary>
</member>
<member name="P:FsPickler.Writer.BinaryWriter">
 <summary>BinaryWriter to underlying stream.</summary>
</member>
<member name="M:FsPickler.Writer.WriteSequence``1(FsPickler.Pickler{``0},System.String,System.Collections.Generic.IEnumerable{``0})">
<summary>
 used internally for optimized writing of sequences to the underlying stream.
 must only be performed as a top-level-operation
</summary>
</member>
<member name="M:FsPickler.Writer.WriteRootObject``1(FsPickler.Pickler{``0},System.String,``0)">
<summary>
 used internally for writing a root  object to the underlying stream.
 must only be performed as a top-level-operation
</summary>
</member>
<member name="M:FsPickler.Writer.Write``1(FsPickler.Pickler{``0},``0)">
 <summary>Serialize value to the underlying stream using the given pickler.</summary>
 <param name="pickler">Pickler used in serialization.</param>
 <param name="value">The input value.</param>
</member>
<member name="">

</member>
<member name="T:FsPickler.Writer">
<summary>
 Serialization state object.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:FsPickler.ArrayPickler">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:FsPickler.BasePicklers">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:FsPickler.CombinatorImpls">

</member>
<member name="M:FsPickler.Combinators.getHashCode``1(``0)">
<summary>
 computes the hashcode of given value
</summary>
</member>
<member name="M:FsPickler.Combinators.getSize``1(``0)">
<summary>
 computes the size of given value
</summary>
</member>
<member name="M:FsPickler.Combinators.unpickle``1(FsPickler.Pickler{``0},System.Byte[])">
<summary>
 upickles a value
</summary>
</member>
<member name="M:FsPickler.Combinators.pickle``1(FsPickler.Pickler{``0},``0)">
<summary>
 pickles a value
</summary>
</member>
<member name="">

</member>
<member name="M:FsPickler.Combinators.Pickler.variant``1(``0)">
<summary>
 Useful for union cases without arguments.
</summary>
</member>
<member name="M:FsPickler.Combinators.Pickler.case``2(``0,``1)">
<summary>
 See `sum`.
</summary>
</member>
<member name="M:FsPickler.Combinators.Pickler.sum``3(Microsoft.FSharp.Core.FSharpFunc{``0,``1})">
<summary>
 Starts defining a pickler for an n-ary sum type, such as
 a union type. For example:

    type UnionT =
        | Case1
        | Case2 of int
        | Case3 of string * int

    let unionTPickler =
        Pickler.sum (fun x k1 k2 k3 -&gt;
            match x with
            | Case1 -&gt; k1 ()
            | Case2 x -&gt; k2 x
            | Case3 (x, y) -&gt; k3 (x, y))
        ^+ Pickler.variant Case1
        ^+ Pickler.case Case2 Pickler.int
        ^. Pickler.case Case3 (Pickler.pair Pickler.string Pickler.int)

 Note that the implementation is not currently efficient,
 though it may improve in the future.
</summary>
</member>
<member name="M:FsPickler.Combinators.Pickler.field``4(Microsoft.FSharp.Core.FSharpFunc{``0,``1},FsPickler.Pickler{``1})">
<summary>
 See `product`.
</summary>
</member>
<member name="M:FsPickler.Combinators.Pickler.product``3(``0)">
<summary>
 Starts defining a pickler for an n-ary product, such as
 record. Example:

    type Person =
        {
            Address : string
            Age : int
            Name : string
        }

    let makePerson name age address =
        {
            Address = address
            Age = age
            Name = name
        }

    let personPickler =
        Pickler.product makePerson
        ^+ Pickler.field (fun p -&gt; p.Name) Pickler.string
        ^+ Pickler.field (fun p -&gt; p.Age) Pickler.int
        ^. Pickler.field (fun p -&gt; p.Address) Pickler.string

 The implementation is not currently efficient, though it
 may improve in the future.
</summary>
</member>
<member name="M:FsPickler.Combinators.Pickler.fix3``3(Microsoft.FSharp.Core.FSharpFunc{FsPickler.Pickler{``0},Microsoft.FSharp.Core.FSharpFunc{FsPickler.Pickler{``1},Microsoft.FSharp.Core.FSharpFunc{FsPickler.Pickler{``2},System.Tuple{FsPickler.Pickler{``0},FsPickler.Pickler{``1},FsPickler.Pickler{``2}}}}})">
<summary>
 pickler fixpoint combinator
</summary>
</member>
<member name="M:FsPickler.Combinators.Pickler.fix2``2(Microsoft.FSharp.Core.FSharpFunc{FsPickler.Pickler{``0},Microsoft.FSharp.Core.FSharpFunc{FsPickler.Pickler{``1},System.Tuple{FsPickler.Pickler{``0},FsPickler.Pickler{``1}}}})">
<summary>
 pickler fixpoint combinator
</summary>
</member>
<member name="M:FsPickler.Combinators.Pickler.fix``1(Microsoft.FSharp.Core.FSharpFunc{FsPickler.Pickler{``0},FsPickler.Pickler{``0}})">
<summary>
 pickler fixpoint combinator
</summary>
</member>
<member name="M:FsPickler.Combinators.Pickler.func``2">
<summary>
 F# function combinator
</summary>
</member>
<member name="M:FsPickler.Combinators.Pickler.alt``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Int32},Microsoft.FSharp.Collections.FSharpList{FsPickler.Pickler{``0}})">
<summary>
 alt combinator: choose from list of pickler combinators using tag reader
</summary>
</member>
<member name="M:FsPickler.Combinators.Pickler.wrap``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},Microsoft.FSharp.Core.FSharpFunc{``1,``0},FsPickler.Pickler{``0})">
<summary>
 wrap combinator: defines picklers up to isomorphism
</summary>
</member>
<member name="M:FsPickler.Combinators.Pickler.pairSeq``2(FsPickler.Pickler{``0},FsPickler.Pickler{``1})">
<summary>
 sequence of pairs pickler combinator ; uses eager evaluation
</summary>
</member>
<member name="M:FsPickler.Combinators.Pickler.seq``1(FsPickler.Pickler{``0})">
<summary>
 sequence pickler combinator ; uses eager evaluation
</summary>
</member>
<member name="M:FsPickler.Combinators.Pickler.array4D``1(FsPickler.Pickler{``0})">
<summary>
 array4D pickler combinator
</summary>
</member>
<member name="M:FsPickler.Combinators.Pickler.array3D``1(FsPickler.Pickler{``0})">
<summary>
 array3D pickler combinator
</summary>
</member>
<member name="M:FsPickler.Combinators.Pickler.array2D``1(FsPickler.Pickler{``0})">
<summary>
 array2D pickler combinator
</summary>
</member>
<member name="M:FsPickler.Combinators.Pickler.array``1(FsPickler.Pickler{``0})">
<summary>
 array pickler combinator
</summary>
</member>
<member name="M:FsPickler.Combinators.Pickler.set``1(FsPickler.Pickler{``0})">
<summary>
 FSharp set pickler combinator
</summary>
</member>
<member name="M:FsPickler.Combinators.Pickler.map``2(FsPickler.Pickler{``0},FsPickler.Pickler{``1})">
<summary>
 FSharp map pickler combinator
</summary>
</member>
<member name="M:FsPickler.Combinators.Pickler.list``1(FsPickler.Pickler{``0})">
<summary>
 FSharp list pickler combinator
</summary>
</member>
<member name="M:FsPickler.Combinators.Pickler.ref``1(FsPickler.Pickler{``0})">
<summary>
 FSharp ref pickler combinator
</summary>
</member>
<member name="M:FsPickler.Combinators.Pickler.choice4``4(FsPickler.Pickler{``0},FsPickler.Pickler{``1},FsPickler.Pickler{``2},FsPickler.Pickler{``3})">
<summary>
 Choice&lt;_,_,_,_&gt; pickler combinator
</summary>
</member>
<member name="M:FsPickler.Combinators.Pickler.choice3``3(FsPickler.Pickler{``0},FsPickler.Pickler{``1},FsPickler.Pickler{``2})">
<summary>
 Choice&lt;_,_,_&gt; pickler combinator
</summary>
</member>
<member name="M:FsPickler.Combinators.Pickler.choice2``2(FsPickler.Pickler{``0},FsPickler.Pickler{``1})">
<summary>
 Choice&lt;_,_&gt; pickler combinator
</summary>
</member>
<member name="M:FsPickler.Combinators.Pickler.option``1(FsPickler.Pickler{``0})">
<summary>
 option pickler combinator
</summary>
</member>
<member name="M:FsPickler.Combinators.Pickler.quad``4(FsPickler.Pickler{``0},FsPickler.Pickler{``1},FsPickler.Pickler{``2},FsPickler.Pickler{``3})">
<summary>
 quad pickler combinator
</summary>
</member>
<member name="M:FsPickler.Combinators.Pickler.triple``3(FsPickler.Pickler{``0},FsPickler.Pickler{``1},FsPickler.Pickler{``2})">
<summary>
 triple pickler combinator
</summary>
</member>
<member name="M:FsPickler.Combinators.Pickler.pair``2(FsPickler.Pickler{``0},FsPickler.Pickler{``1})">
<summary>
 pair pickler combinator
</summary>
</member>
<member name="">

</member>
<member name="M:FsPickler.Combinators.Pickler.auto``1">
<summary>
 auto generate a pickler
</summary>
</member>
<member name="P:FsPickler.Combinators.Pickler.obj">
<summary>
 the default System.Object pickler
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:FsPickler.Combinators.Pickler.SumInternals.Wrap`1.op_HatPlus``2(FsPickler.Combinators.Pickler.SumInternals.Wrap{Microsoft.FSharp.Core.FSharpFunc{``0,``1}},FsPickler.Combinators.Pickler.SumInternals.Wrap{``0})">
<summary>
 Adds a case.
</summary>
</member>
<member name="M:FsPickler.Combinators.Pickler.SumInternals.Wrap`1.op_HatDot``4(FsPickler.Combinators.Pickler.SumInternals.Wrap{Microsoft.FSharp.Core.FSharpFunc{FsPickler.Combinators.Pickler.SumInternals.Part{``0,Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.FSharpFunc{``1,``2},``2},``1,``2},``3}},FsPickler.Combinators.Pickler.SumInternals.Case{Microsoft.FSharp.Core.FSharpFunc{``1,``0},FsPickler.Pickler{``1}})">
<summary>
 Adds the last case.
</summary>
</member>
<member name="T:FsPickler.Combinators.Pickler.SumInternals.Wrap`1">
<summary>
 Internal type for type-checking intermediate values.
</summary>
</member>
<member name="">

</member>
<member name="M:FsPickler.Combinators.Pickler.SumInternals.Case`2.op_HatPlus``5(FsPickler.Combinators.Pickler.SumInternals.Case{Microsoft.FSharp.Core.FSharpFunc{``0,``1},FsPickler.Pickler{``0}},FsPickler.Combinators.Pickler.SumInternals.Wrap{FsPickler.Combinators.Pickler.SumInternals.Part{``1,``2,``3,``4}})">
<summary>
 Adds a case.
</summary>
</member>
<member name="M:FsPickler.Combinators.Pickler.SumInternals.Case`2.op_HatDot``4(FsPickler.Combinators.Pickler.SumInternals.Case{Microsoft.FSharp.Core.FSharpFunc{``0,``1},FsPickler.Pickler{``0}},FsPickler.Combinators.Pickler.SumInternals.Case{Microsoft.FSharp.Core.FSharpFunc{``2,``1},FsPickler.Pickler{``2}})">
<summary>
 Adds the last case.
</summary>
</member>
<member name="T:FsPickler.Combinators.Pickler.SumInternals.Case`2">
<summary>
 Internal type for type-checking intermediate values.
</summary>
</member>
<member name="">

</member>
<member name="T:FsPickler.Combinators.Pickler.SumInternals.Part`4">
<summary>
 Internal type for type-checking intermediate values.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:FsPickler.Combinators.Pickler.SumInternals">
<summary>
 Experimental support for n-way sum types such as unions.
 See `sum`.
</summary>
</member>
<member name="">

</member>
<member name="M:FsPickler.Combinators.Pickler.ProductInternals.Wrap`1.op_HatPlus``2(FsPickler.Combinators.Pickler.ProductInternals.Wrap{Microsoft.FSharp.Core.FSharpFunc{``0,``1}},``0)">
<summary>
 Defines an extra field.
</summary>
</member>
<member name="M:FsPickler.Combinators.Pickler.ProductInternals.Wrap`1.op_HatDot``3(FsPickler.Combinators.Pickler.ProductInternals.Wrap{Microsoft.FSharp.Core.FSharpFunc{``0,``1}},FsPickler.Combinators.Pickler.ProductInternals.Wrap{Microsoft.FSharp.Core.FSharpFunc{FsPickler.Combinators.Pickler.ProductInternals.Part{``2,``2,Microsoft.FSharp.Core.Unit},``0}})">
<summary>
 Defines the last field.
</summary>
</member>
<member name="T:FsPickler.Combinators.Pickler.ProductInternals.Wrap`1">
<summary>
 Internal type for type-checking intermediate values.
</summary>
</member>
<member name="">

</member>
<member name="T:FsPickler.Combinators.Pickler.ProductInternals.Part`3">
<summary>
 Internal type for type-checking intermediate values.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:FsPickler.Combinators.Pickler.ProductInternals">
<summary>
 Experimental support for n-way product types such as records.
 See `product` and `field` combinators.
</summary>
</member>
<member name="T:FsPickler.Combinators.Pickler">

</member>
<member name="T:FsPickler.Combinators">

</member>
<member name="">

</member>
<member name="T:FsPickler.Config">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:FsPickler.DotNetPicklers">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:FsPickler.Emit.readInt(FsPickler.Emit.EnvItem{FsPickler.Reader},System.Reflection.Emit.ILGenerator)">
<summary>
 reads an integer and push to stack
</summary>
</member>
<member name="M:FsPickler.Emit.writeInt(FsPickler.Emit.EnvItem{FsPickler.Writer},FsPickler.Emit.EnvItem{System.Int32},System.Reflection.Emit.ILGenerator)">
<summary>
 writes and integer
</summary>
</member>
<member name="M:FsPickler.Emit.wrapISerializableConstructor``1(System.Reflection.ConstructorInfo)">
<summary>
 wraps call to ISerializable constructor in a dynamic method
</summary>
</member>
<member name="M:FsPickler.Emit.emitDeserializationCallback``1(FsPickler.Emit.EnvItem{``0},System.Reflection.Emit.ILGenerator)">
<summary>
 emit a call to the &apos;OnDeserialization&apos; method on given value
</summary>
</member>
<member name="M:FsPickler.Emit.emitSerializationMethodCalls``1(System.Reflection.MethodInfo[],Microsoft.FSharp.Core.FSharpChoice{FsPickler.Emit.EnvItem{FsPickler.Writer},FsPickler.Emit.EnvItem{FsPickler.Reader}},FsPickler.Emit.EnvItem{``0},System.Reflection.Emit.ILGenerator)">
<summary>
 calls a predefined collection of serialization methods on given value
</summary>
</member>
<member name="M:FsPickler.Emit.emitObjectInitializer(System.Type,System.Reflection.Emit.ILGenerator)">
<summary>
 push an uninitialized object of type &apos;t&apos; to the stack
</summary>
</member>
<member name="M:FsPickler.Emit.emitDeserializeAndConstruct(Microsoft.FSharp.Core.FSharpChoice{System.Reflection.MethodInfo,System.Reflection.ConstructorInfo},System.Type[],FsPickler.Emit.EnvItem{FsPickler.Reader},FsPickler.Emit.EnvItem{FsPickler.Pickler[]},System.Reflection.Emit.ILGenerator)">
<summary>
 deserialize fields, pass to factory method and push to stack
</summary>
</member>
<member name="M:FsPickler.Emit.emitSerializeProperties``1(System.Reflection.PropertyInfo[],FsPickler.Emit.EnvItem{FsPickler.Writer},FsPickler.Emit.EnvItem{FsPickler.Pickler[]},FsPickler.Emit.EnvItem{``0},System.Reflection.Emit.ILGenerator)">
<summary>
 serialize properties to the underlying stack
</summary>
</member>
<member name="M:FsPickler.Emit.emitDeserializeFields``1(System.Reflection.FieldInfo[],FsPickler.Emit.EnvItem{FsPickler.Reader},FsPickler.Emit.EnvItem{FsPickler.Pickler[]},FsPickler.Emit.EnvItem{``0},System.Reflection.Emit.ILGenerator)">
<summary>
 deserialize a collection of fields and store to parent object
</summary>
</member>
<member name="M:FsPickler.Emit.emitSerializeFields``1(System.Reflection.FieldInfo[],FsPickler.Emit.EnvItem{FsPickler.Writer},FsPickler.Emit.EnvItem{FsPickler.Pickler[]},FsPickler.Emit.EnvItem{``0},System.Reflection.Emit.ILGenerator)">
<summary>
 emits IL that serializes a collection of fields
</summary>
</member>
<member name="M:FsPickler.Emit.emitDeserialize(System.Type,System.Reflection.Emit.ILGenerator)">
<summary>
 emit IL that deserializes an object
 last 2 items in stack: Reader; Pickler&lt;&apos;T&gt;
</summary>
</member>
<member name="M:FsPickler.Emit.emitSerialize(System.Type,System.Reflection.Emit.ILGenerator)">
<summary>
 emit IL that serializes last object in stack
 last 3 items in stack: Writer; Pickler&lt;&apos;T&gt;; &apos;T
</summary>
</member>
<member name="M:FsPickler.Emit.emitLoadPickler(FsPickler.Emit.EnvItem{FsPickler.Pickler[]},System.Type,System.Int32,System.Reflection.Emit.ILGenerator)">
<summary>
 emits typed pickler from array of untyped picklers
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:FsPickler.Emit.ReflectedPicklerAPI">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:FsPickler.Emit.DynamicMethod">

</member>
<member name="T:FsPickler.Emit">

</member>
<member name="M:FsPickler.ExtensionMethods.Reader.ReadKeyValueSequence``2(FsPickler.Reader)">
<summary>
 reads the underlying stream for a sequence of pairs of given types.
</summary>
</member>
<member name="M:FsPickler.ExtensionMethods.Reader.ReadSequence``1(FsPickler.Reader)">
<summary>
 reads the underlying stream for a sequence of items of given type.
</summary>
</member>
<member name="M:FsPickler.ExtensionMethods.Writer.WriteKeyValueSequence``2(FsPickler.Writer,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}})">
<summary>
 evaluates given sequence of pairs, serializing all elements to the underlying stream
</summary>
</member>
<member name="M:FsPickler.ExtensionMethods.Writer.WriteSequence``1(FsPickler.Writer,System.Collections.Generic.IEnumerable{``0})">
<summary>
 evaluates given sequence, serializing all elements to the underlying stream
</summary>
</member>
<member name="M:FsPickler.ExtensionMethods.Pickler.FromPrimitives.Static``1(Microsoft.FSharp.Core.FSharpFunc{FsPickler.Reader,``0},Microsoft.FSharp.Core.FSharpFunc{FsPickler.Writer,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.Unit}},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>Initializes a pickler out of a pair of read/write lambdas. Unsafe pickler generation method.</summary>
 <param name="reader">Deserialization logic for the pickler.</param>
 <param name="writer">Serialization logic for the pickler.</param>
 <param name="cache">Specifies whether the serializer should cache by reference when serializing.</param>
 <param name="useWithSubtypes">Specifies whether this specific pickler should apply to all subtypes.</param>
</member>
<member name="T:FsPickler.ExtensionMethods">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:FsPickler.FSharpPicklers">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:FsPickler.Hashing.MurMur3">
<summary>
 MurMur3 128-bit hashing algorithm.
 Optimized for 64-bit architectures
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:FsPickler.Hashing.FNV1aStream">
<summary>
 64-bit Fowler-Noll-Vo hashing algorithm
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:FsPickler.Hashing.FNV1aStreamFactory">
<summary>
 64-bit Fowler-Noll-Vo hashing algorithm
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:FsPickler.Hashing.HashStream">
<summary>
 An abstract byte sink used as a hash generating state machine
</summary>
</member>
<member name="">

</member>
<member name="T:FsPickler.Hashing.IHashStreamFactory">
<summary>
 An immutable factory interface for HashStreams
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:FsPickler.Hashing.MurMur3Utils">

</member>
<member name="">

</member>
<member name="M:FsPickler.Header.computeTypeKind(System.Type)">
<summary>
 builds type info enumeration out of reflection info
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:FsPickler.Header.ObjHeader">

</member>
<member name="T:FsPickler.Header">

</member>
<member name="">

</member>
<member name="M:FsPickler.PicklerResolution.YParametric(FsPickler.Utils.ICache{System.Type,FsPickler.Pickler},Microsoft.FSharp.Core.FSharpFunc{FsPickler.IPicklerResolver,Microsoft.FSharp.Core.FSharpFunc{System.Type,FsPickler.Pickler}},System.Type)">
<summary>
 Y combinator with parametric recursion support
</summary>
</member>
<member name="T:FsPickler.PicklerResolution">

</member>
<member name="M:FsPickler.PicklerUtils.readKVPairs'``2(FsPickler.Pickler{``0},FsPickler.Pickler{``1},FsPickler.Reader)">
<summary>
 Deserializes a sequence of key/value pairs from the underlying stream
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:FsPickler.PicklerUtils.readStringSafe(System.IO.BinaryReader)">
<summary>
 safely deserialize strings, including nulls
</summary>
</member>
<member name="M:FsPickler.PicklerUtils.writeStringSafe(System.IO.BinaryWriter,System.String)">
<summary>
 safely serialize strings, including nulls
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:FsPickler.PicklerUtils.setPicklerId``1(System.Collections.Generic.IEnumerable{FsPickler.Pickler},``0)">
<summary>
 set pickler id based on set of source picklers
 will result in error if source picklers have conflicting source ids
 used with external combinator library
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:FsPickler.PicklerUtils.getSerializationMethods``1(System.Reflection.MethodInfo[])">
<summary>
 filter a collection of methods that carry serialization attributes
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:FsPickler.PicklerUtils">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:FsPickler.ReflectionPicklers.CompositeMemberInfo">
<summary>
 Contains breakdown information for a MemberInfo instance
 This information can be memoized for performance and
 is sufficient to restructure the instance at deserialization.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:FsPickler.ReflectionPicklers">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:FsPickler.TuplePicklers">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:FsPickler.TypeShape.PicklerFactoryIndex">
<summary>
 an immutable index for generic picklers
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:FsPickler.TypeShape">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:FsPickler.Utils.BiMemoizer`2">
<summary>
 takes an isomorphic function and its inverse as inputs
 memoizes output in both directions
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:FsPickler.Utils.ICache`2">
<summary>
 replacement for IDictionary
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:FsPickler.Utils.gatherFields(System.Type)">
<summary>
 walks up the type hierarchy, gathering all instance fields
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:FsPickler.Utils.memoize``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1})">
<summary>
 thread safe memo operator
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:FsPickler.Utils.raise``1(System.Exception)">
<summary>
 stackless raise operator
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:FsPickler.Utils.SerializationInfo">

</member>
<member name="M:FsPickler.Utils.Stream.WriteToArray(System.IO.Stream,System.Array)">
<summary>
 copy stream contents to preallocated array
</summary>
</member>
<member name="M:FsPickler.Utils.Stream.ReadFromArray(System.IO.Stream,System.Array)">
<summary>
 block copy primitive array to stream
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:FsPickler.Utils.Stream">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:FsPickler.Utils.Atom">

</member>
<member name="T:FsPickler.Utils">

</member>
</members>
</doc>
